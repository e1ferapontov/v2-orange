#####################################################################
#	Macros
#####################################################################
# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}

[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% if 'P' in params %}{% set accel = params.P|int %}{% endif %}
  {% if 'S' in params %}{% set accel = params.S|int %}{% endif %}
  {% if 'T' in params %}{% set accel = params.T|int %}{% endif %}

  SET_VELOCITY_LIMIT ACCEL={ accel } ACCEL_TO_DECEL={ accel / 2 }

[gcode_macro MOTORS_OFF]
gcode:
    M84

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X125 Y125 Z30 F3600

[gcode_macro SOAK]
gcode:
  # Parameters
  {% set min = params.MIN|default(120)|int %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(50)|int %}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=115									; heat bed high
  STATUS_HEATING
  PARKCENTERLOW
  
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=115										; wait for heater_bed temp to stabilize
  M117 Bed reached heatsoak temp, stabilizing
  G4 P30000																				; dwell 0.5 min
  M117 Bed stabilized!
  BedFansFast																			; turn on convection

  M117 Waiting for chamber temp...
  TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER_TEMP}
  M117 Chamber reached temp
  G0 Z1
  G4 P{min * 60 * 1000}
  FLASH_LIGHTS
  ; still alive
  M300 P157 S659
  M300 P247 S740
  M300 P250 S740



[gcode_macro HEATSOAK]
gcode:
  {% set move = params.MOVE|default(1)|int %}
  {% set BED_TEMP = params.BED_TEMP|default(115) %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP|int|default(50) %}

  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=115									; heat bed high
  STATUS_HEATING
  BedFansSlow																			; turn on convection

  {% if move == 1 %}
    PARKCENTERLOW
  {% endif %}

  
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP}								; wait for heater_bed temp to stabilize
  M117 Bed reached heatsoak temp, stabilizing
  # G4 P300000																			; dwell 5 min
  G4 P30000																				; dwell 0.5 min
  M117 Bed stabilized!

  BedFansFast																			; turn on convection

  M117 Waiting for chamber temp...
  TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER_TEMP}
  M117 Chamber reached temp

  # G0 Z1																					; move the gantry lower
  # M117 Heatsoaking gantry
  # G4 P600000																			; dwell 10 min

  BEEP I=2
  FLASH_LIGHTS																			; flash caselight
  M117 Soak complete!
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}							; set bed to proper temp


#####################################################################
#	Routines
#####################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 20.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}

  TURN_OFF_HEATERS
  M107									    			; turn off fan
  BedFansOff											; turn off convection
  SET_NOZZLE_LEDS_OFF

  M400								    				; wait for buffer to clear
  G91													; relative positioning
  G0 Z1.00 X-2.0 Y-2.0 F3000							; move nozzle to remove stringing
  G1 Z{z_safe} F3000 									; move nozzle up
  G90													; absolute positioning

  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  # Parameters
  {% set z = params.Z|default(10)|int %}                                                 ; z hop amount
  
  {% if printer['pause_resume'].is_paused|int == 0 %}     
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                            
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
    SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
    BASE_PAUSE                                                                           ; pause print
    {action_respond_info("Print paused")}
    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
        G91                                                                              ; relative positioning
        G1 Z{z} F900                                                                     ; raise Z up by z hop amount
    {% else %}
        { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
    {% endif %}
    G90                                                                                  ; absolute positioning
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
    SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
    SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
  {% else %}
    {action_respond_info("Print alredy paused!")}
  {% endif %}



[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
  # Parameters
  {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
  
  {% if printer['pause_resume'].is_paused|int == 1 %}
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
    RESETRGB                                                                    ; reset LCD color
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
    {% if etemp > 0 %}
        M109 S{etemp|int}                                                        ; wait for hotend to heat back up
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
    G91                                                                          ; relative positioning
    M83                                                                          ; relative extruder positioning
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
        G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
    {% else %}                      
        G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
    {% endif %}                             
    RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
    BASE_RESUME                                                                  ; resume print
    {action_respond_info("Resuming print.")}
  {% else %}
    {action_respond_info("Print not paused!")}
  {% endif %}


[gcode_macro PRINT_START]
gcode:
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(50) %}
  {% set BED_TEMP = params.BED_TEMP|default(110) %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(250) %}
  {% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}

  ; Prepare everything and soak
  SET_FRAME_COMP ENABLE=0																; turn off frame comp
  BED_MESH_CLEAR																		; clear any saved mesh
  SET_GCODE_OFFSET Z=0																	; clear any offset
  STATUS_HEATING
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}							; start heating bed

  # {% if printer["temperature_sensor chamber"].temperature <= CHAMBER_TEMP %}
    # HEATSOAK BED_TEMP={BED_TEMP} CHAMBER_TEMP={CHAMBER_TEMP} MOVE=1					; heatsoak if not already
  # {% endif %}

  CG28
  ATTACH_PROBE
  PARKCENTERLOW
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP|int + 1}		; wait for heater_bed temp to stabilize
  M117 Bed reached heatsoak temp, stabilizing
  G4 P30000																				; dwell 0.5 min
  M117 Bed stabilized!
  BedFansFast																			; turn on convection
  DOCK_PROBE

  ; Run routines
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=170									; set hotend to no-ooze temp
  G28																					; rehome everything
  QUAD_GANTRY_LEVEL																		; quad gantry level

  ; Purge and print
  G0 X0 Y{printer.toolhead.axis_maximum.y} Z10 F90000000000							; move to bucket
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}						; heat the nozzle to print temperature
  TEMPERATURE_WAIT sensor=extruder minimum={EXTRUDER_TEMP} 							; wait for nozzle to reach temperature
  NOZZLE_CLEANER__CLEAN HOTEND={EXTRUDER_TEMP}											; purge the nozzle
  SET_FRAME_REF_TEMP

  WIPE
  CALIBRATE_Z																			; calibrate z-offset
  SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1											; Adjust the G-Code Z offset if needed

  BED_MESH_CALIBRATE																	; mesh
  SET_FRAME_COMP ENABLE=1																; turn on frame comp
  # BedFansOff																			; turn off convection
  M107																					; turn off parts fan
  M117
  G92 E0																				; zero the extruder
  G90																					; absolute movements
  WIPE

  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1									; enable filament sensor
  ; Start printing
  status_printing
  G1 X0 Y10 f5000
  G1 Z0.2
  G92 E0
  G1 Y140 E10 F1500 ; prime the nozzle
  G1 X0.4 F5000
  G92 E0
  G1 Y10 E10 F1200 ; prime the nozzle
  G1 X0.8 F5000
  G92 E0
  G1 Y140 E10 F1200 ; prime the nozzle
  G92 E0
  

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 20.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}

  M400													; wait for buffer to clear
  G92 E0												; zero the extruder
  G1 E-10.0 F3600           					        ; retract filament
  G91													; relative positioning
  G0 Z1.00 X-2.0 Y-2.0 F3000							; move nozzle to remove stringing
  G1 Z{z_safe} F3000 									; move nozzle up
  G90													; absolute positioning
  G0 X30 Y{printer.toolhead.axis_maximum.y} F18000		; move to bucket
  M107													; turn off fan
  BedFansOff											; turn off convection
  # BED_MESH_CLEAR
  TURN_OFF_HEATERS

  ; still alive
  M300 P157 S659
  M300 P247 S740
  M300 P250 S740

  SET_NOZZLE_LEDS_OFF


[gcode_macro LCDRGB]
gcode:
    {% set r = params.R|default(1)|float %}
    {% set g = params.G|default(1)|float %}
    {% set b = params.B|default(1)|float %}

    SET_LED LED=fysetc_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED={r/20} GREEN={g/35} BLUE={b/35} INDEX=2 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED={r/20} GREEN={g/35} BLUE={b/35} INDEX=3


[gcode_macro RESETRGB]
gcode:
    SET_LED LED=fysetc_mini12864 RED=1 GREEN=0.35 BLUE=0 INDEX=1 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=0.05 GREEN=0.001 BLUE=0 INDEX=2 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=0.05 GREEN=0.001 BLUE=0 INDEX=3


######################### SAFETY #########################

# Lower z stepper current (in case of crash). Referenced in my klicky homing overrides and in calibrate_z.
[gcode_macro LOWERCURRENT]
gcode:
  SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.35
  SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.35
  SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.35
  SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.35
  
# Returns z steppers back to their currents specified in the config.
[gcode_macro RESETCURRENT]
gcode:
  SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings["tmc2209 stepper_z"].run_current}
  SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings["tmc2209 stepper_z1"].run_current}
  SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings["tmc2209 stepper_z2"].run_current}
  SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings["tmc2209 stepper_z3"].run_current}

######################### PARKING #########################

[gcode_macro PARK_BELTS]
gcode:
  g0 x125.5 y120 z15 f9000000

# Park front center
[gcode_macro PARKFRONT]
gcode:
  CG28                                  																						; home if not already homed
  SAVE_GCODE_STATE NAME=PARKFRONT
  G90                                   																						; absolute positioning
  G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
  RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front low
[gcode_macro PARKFRONTLOW]
gcode:
  CG28                                  																						; home if not already homed
  SAVE_GCODE_STATE NAME=PARKFRONTLOW
  G90                                   																						; absolute positioning
  G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z80 F19500		
  RESTORE_GCODE_STATE NAME=PARKFRONTLOW

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
  CG28                                  																						; home if not already homed
  SAVE_GCODE_STATE NAME=PARKCENTER
  G90                                   																						; absolute positioning
  G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
  RESTORE_GCODE_STATE NAME=PARKCENTER

# Park center on top of bed's center
[gcode_macro PARKCENTERLOW]
gcode:
  CG28                                  																						; home if not already homed
  SAVE_GCODE_STATE NAME=PARKCENTERLOW
  G90                                   																						; absolute positioning
  G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500	
  RESTORE_GCODE_STATE NAME=PARKCENTERLOW

######################### FILAMENT #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=UNLOADFILAMENT
  M83                                   ; set extruder to relative
  G1 E10 F420                           ; extrude a little to soften tip 
  G1 E-100 F1800                        ; retract filament completely
  G1 E-100 F1800                        ; retract filament completely
  RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=LOADFILAMENT
  M83 ; set extruder to relative
  G1 E90 F420
  RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
  # Parameters
  {% set t = params.T|default(240)|int %}

  PARKFRONTLOW
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={t}
  TEMPERATURE_WAIT sensor=extruder minimum={t} 
  M109 S{t}
  UNLOAD_FILAMENT
	
[gcode_macro HOT_LOAD]
gcode:
  # Parameters
  {% set t = params.T|default(240)|int %}

  PARKFRONTLOW
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={t}
  TEMPERATURE_WAIT sensor=extruder minimum={t} 
  LOAD_FILAMENT



######################### TESTING #########################

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED